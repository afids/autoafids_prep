# ---- begin snakebids boilerplate ----------------------------------------------
import sys
from pathlib import Path
from functools import partial
from snakebids import (
    bids,
    generate_inputs,
    get_wildcard_constraints,
)

configfile: "config/snakebids.yml"

# writes inputs_config.yml and updates config dict
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_config=["bids", "derivatives"],
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
)

# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),

# ---- end snakebids boilerplate -------------------------------------------------


# ---- begin preproc profile pathways --------------------------------------------

# Determine if custom profile is selected for interactive configuration
if config["profile"] == 'custom':
    print('# ---- begin interactive snakebids mode -----------------------------------------')

    def prompt_for_configuration_options():
        configs = {
            "freesurfer_preproc": {"message": "Do you want to run freesurfer's autorecon 1? (y/n)", "type": "bool"},
            "run_n4_bias_correction": {"message": "Do you want to run N4BiasFieldCorrection? (y/n)", "type": "bool"},
            # Ensure each option is unique and correctly conditional
            "skull_strip": {"message": "Do you want to skull strip your data? (y/n)", "type": "bool", "condition": "freesurfer_preproc"}
        }
        config_responses = {}

        for config_option, config_info in configs.items():
            # Skip questions based on conditions
            if config_info.get("condition") and not config_responses.get(config_info["condition"], False):
                continue

            user_input = input(config_info["message"]).strip().lower()
            while user_input not in ["y", "n"]:
                print("Invalid input. Please choose 'y' for yes or 'n' for no.")
                user_input = input(config_info["message"]).strip().lower()
            config_responses[config_option] = user_input == "y"
        return config_responses

    user_configurations = prompt_for_configuration_options()
else:
    processing_steps = {
        "slow": ["freesurfer_preproc", "skull_strip", "norm_im"],
        "medium": ["n4_bias_correction", "skull_strip", "norm_im", "resample_im"],
        "fast": ["n4_bias_correction", "norm_im", "resample_im"],
        "superfast": ["norm_im", "resample_im"]
    }

    profile_settings = processing_steps[config["profile"]]

# Normalization scheme 
norm_methods = {
    0: "zscore", #best for multi-contrast data
    1: "minmax", #best for data from the same center
    2: "percentile", #best for CT imaging [notavail]
    3: "wm", #triggers FS WM tissue normalization then z-scores output (only for T1w)[notavail]
    4: "other" #user must provide a python funtion (custom)[notavail]
}

# Chosen norm method
chosen_norm_method =  norm_methods[int(config['norm'])]

# Chosen resampling resolution
resolution = float(config['res'])

print(f'..... {config["profile"]} preprocessing configration .....')
print(f' the folowing squence will be triggered {profile_settings}')

# ---- end preproc profile pathways ----------------------------------------------
synthstrip_bids = partial(
    bids,
    root=str(Path(config["output_dir"]) / "synthstrip"),
    datatype="anat",
    desc="synthstrip",
    **inputs["t1w"].wildcards,
)

im_normed = partial(
    bids,
    root=str(Path(config["output_dir"]) / "normalize"),
    datatype="anat",
    desc=chosen_norm_method,
    **inputs["t1w"].wildcards,
)

im_resamp = partial(
    bids,
    root=str(Path(config["output_dir"]) / "resample"),
    datatype="anat",
    desc=chosen_norm_method,
    res=config["res"],
    **inputs["t1w"].wildcards,
)
train_bids = partial(
    bids,
    root=str(Path(config["output_dir"]) / "train"),
    datatype="anat",
    **inputs["t1w"].wildcards,
)

if "n4_bias_correction" in profile_settings:

    rule n4_bias_correction:
        input:
            im=bids(
            root=str(Path(config["bids_dir"])),
            datatype="anat",
            suffix="T1w.nii.gz",
            **inputs["t1w"].wildcards
            ),
        output:
            corrected_im=bids(
                root=str(Path(config["output_dir"]) / "n4biascorr"),
                datatype="anat",
                desc="n4corrected",
                suffix="T1w.nii.gz",
                **inputs["t1w"].wildcards
            ),
        script:
            "scripts/n4_bias_corr.py"

if "freesurfer_preproc" in profile_settings:
    
    rule freesurfer_preproc:
        input:
            rimage=bids(
            root=str(Path(config["bids_dir"])),
            datatype="anat",
            suffix="T1w.nii.gz",
            **inputs["t1w"].wildcards
            ),
    
        output:
            freesurf_mni=str(
                Path(config["output_dir"])
                / "freesurfer"
                / "sub-{subject}"
                / "mri"
                / "T1.mgz"
            ),
            bids_im = bids(
                root=str(Path(config["output_dir"]) / "freesurfer"),
                datatype="anat",
                desc="autorecon1",
                suffix="T1w.nii.gz",
                **inputs["t1w"].wildcards
                )
        params:
            freesurfer_dir=str(Path(config["output_dir"]) / "freesurfer"),

        shell:
            """
            rm -r {params.freesurfer_dir}/sub-{wildcards.subject}
            recon-all -subject sub-{wildcards.subject} -i {input.rimage} -sd {params.freesurfer_dir} -autorecon1 -noskullstrip
            cp {output.freesurf_mni} {output.bids_im}
            """

if "skull_strip" in profile_settings:    

    rule skull_strip:
        input:
            brainskull=lambda wildcards: bids(
                root=str(Path(config["output_dir"]) / "n4biascorr"),
                datatype="anat",
                desc="n4corrected",
                suffix="T1w.nii.gz",
                **inputs["t1w"].wildcards
            ) if "n4_bias_correction" in profile_settings else bids(
                root=str(Path(config["output_dir"]) / "freesurfer"),
                datatype="anat",
                desc="autorecon1",
                suffix="T1w.nii.gz",
                **inputs["t1w"].wildcards
            ),
        output:
            brain=synthstrip_bids(suffix="T1w.nii.gz"),
            mask=synthstrip_bids(suffix="brainmask.nii.gz"),
        container:
            config["singularity"]["synthstrip"]
        resources:
            # TO BE UPDATED
            mem_gb=20,
            cpu=6,
        shell:
            "python3 /freesurfer/mri_synthstrip -i {input.brainskull} -o {output.brain} -m {output.mask}"

rule norm_im:
    input:
        im_raw= lambda wildcards: synthstrip_bids(suffix="T1w.nii.gz") if "skull_strip" in profile_settings else
            bids(root=str(Path(config["output_dir"]) / "n4biascorr"),
                 datatype="anat",
                 desc="n4corrected",
                 suffix="T1w.nii.gz",
                 **inputs["t1w"].wildcards) if "n4_bias_correction" in profile_settings else
            bids(root=str(Path(config["bids_dir"])),
            datatype="anat",
            suffix="T1w.nii.gz",
            **inputs["t1w"].wildcards)
    output:
        im_norm=im_normed(suffix="T1w.nii.gz"),
    params:
        norm_method=chosen_norm_method
    script:
        "scripts/norm_schemes.py"

if "resample_im" in profile_settings:    

    rule resample_im:
        input:
            im_normed=rules.norm_im.output.im_norm,
        params:
            res=resolution
        output:
            resam_im=im_resamp(suffix="T1w.nii.gz"),
        script:
            "./scripts/resample_img.py"
    

# rule mldata:
#     input:
#         finalimg = rules.norm_im.output.im_norm if "resample_im" not in profile_settings else rules.resample_im.output.resam_im,
#     output: 
#         traindir = 
#     shell: 
#         """cp {snakemake.input} {snakemake.output}"""


# dynamic_inputs = [inputs["t1w"].expand(rules.resample_im.output.resam_im),inputs["t1w"].expand(rules.norm_im.output.im_norm)]



rule all:
    input:
        norm = inputs["t1w"].expand(rules.norm_im.output.im_norm),
        samp = inputs["t1w"].expand(rules.resample_im.output.resam_im)
    default_target: True
